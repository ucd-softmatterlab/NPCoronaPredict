import numpy as np
import pandas as pd
import sklearn.cluster as skcluster
import sklearn.decomposition as skdecomp
from scipy.cluster.vq import vq
import warnings
import os
import shutil


warnings.simplefilter(action='ignore', category=pd.errors.PerformanceWarning)

#Path to a file containing protein descriptors. This should be something pandas can read as a dataframe with a "Name" column corresponding to the base name of a protein (i.e. without the -P number)
#all other columns should be descriptor names
proteinSet = pd.read_csv("../../DaphniaProteome/DaphniaProteinStats.csv",skipinitialspace=True)
#print(proteinSet.keys().tolist() )


def SearchDirectory(path, ext, recurse=True):
    files = os.listdir(path)
    pdbs  = []
    for handle in files:
        abspath = os.path.join(path, handle)
        if os.path.isdir(abspath) and recurse == True:
            pdbs += SearchDirectory(abspath)
        elif abspath.split(".")[-1] == ext:
            pdbs.append(abspath)
    return pdbs

targetProject = "-daphnia-1ms"
allConfigs =  SearchDirectory(".", "config", False)
targetMaterials = []
for config in allConfigs:
    if targetProject in config:
        configPath = config.split("/")[-1]
        targetMaterials.append( configPath.split("-daphnia")[0] )
targetMaterials.sort()
print(targetMaterials)

areaNorm = True

#if true save out every timestep of computed averages
saveAllSteps = True

#Exponential average parameters - if enabled, reported values are an exponential average with each step weighted by exp(-delta_t / averageExpDecay)
#as a rule of thumb, anything occuring more than 5*averageExpDecay time units ago essentially no longer contributes to the average
doExpAverage = True
averageExpDecay = 5e-4
expNormDenom = 0

#Load in serum concentrations of each protein- this is used for optional enrichment values, set it to whatever the base serum for your project is, not the material-specific one generated by NPCoronaPredict
serumProteinConcs = []
coronaSerumProteinFile = "daphnia_serum/daphnia_serum_mass1.0_fixedmassfrac.csv"

if coronaSerumProteinFile!= "":
    serumFile = open(coronaSerumProteinFile,"r")
    serumFile.readline()
    for line in serumFile:
        if line[0]=="#":
            continue
        lineTerms = line.strip().split(",")
        serumProteinConcs.append(float(lineTerms[1]))
serumProteinConcs = np.array(serumProteinConcs)


#Define the descriptors to be given as output
targetDescriptors = ["Mass (Da)", "Charge", 'AlaNumber',  'CysNumber',  'AspNumber', 'GluNumber',  'PheNumber',  'GlyNumber',  'HisNumber', 'IleNumber', 'LysNumber',  'LeuNumber','MetNumber', 'AsnNumber',  'ProNumber',  'GlnNumber', 'ArgNumber',  'SerNumber', 'ThrNumber',  'ValNumber',  'TrpNumber',  'TyrNumber',  'TinyNumber',  'SmallNumber',  'AliphaticNumber', 'AromaticNumber', 'NonPolarNumber', 'PolarNumber','ChargedNumber',  'BasicNumber','AcidicNumber']


print("Material," + ",".join([ str(a) for a in targetDescriptors])   )

#materialSet = ["silicaquartz","silicaamorph","anatase101","rutile110","rutile100","fe2o3","CdSe","carbonblack","grapheneoxide","redgrapheneoxide","graphene","gold","cnt"]
materialSet = targetMaterials

fingerprintOut = open("fingerprint_output.txt","w")
headerSuffix = ""
if areaNorm == True:
    headerSuffix = "_areanorm"
fingerprintOut.write("Material," + ",".join([ str(a)+headerSuffix for a in targetDescriptors]) +"\n"  )


radiusVal = 5
for targetMaterial in materialSet:
    areaFactor = 4 * np.pi * radiusVal**2
    if "CNT" in targetMaterial or "Cylinder" in targetMaterial:
        areaFactor = 2 * np.pi * radiusVal *(20)
        print("applying cylinder normalisation")
    coronaStatsFile = open("CoronaPredictionProjects/"+targetMaterial+targetProject+"/coronakmc_output/kmc_running_coronakmcinput.csv_5.0_s0_hs_0.txt","r")
    if saveAllSteps==True:
        coronaStatOutputFile = open("CoronaPredictionProjects/"+targetMaterial+targetProject+"/coronakmc_output/corona_stat_file.txt","w")
        #coronaStatOutputFile = open("corona_material_files/"+targetMaterial+"_corona_stat_file.txt","w")
        coronaStatOutputFile.write("Time," + ",".join([ str(a)+headerSuffix for a in targetDescriptors]) +"\n"  )
    headerLine = coronaStatsFile.readline()
    headerTerms = headerLine.strip().split(",")
    proteinSetTemp = headerTerms[1:-2]
    proteinSetNames = []
    totalSerumMass = 0
    massWeightedDescriptors = np.zeros( len(targetDescriptors) )
    averageDescriptorVals = np.zeros( len(targetDescriptors) )
    lastTime = 0
    expNormDenom = 0
    proteinMassList = []
    proteinDescriptorVals = []
    for protein in proteinSetTemp:
        proteinTerms = protein.split("-P")
        #print(proteinTerms)
        proteinSetNames.append(proteinTerms[0])
        proteinMass = proteinSet.loc[   proteinSet["Name"] == proteinTerms[0], "Mass (Da)"].to_numpy()[0]
        proteinMassList.append(proteinMass)
        proteinDescriptors = proteinSet.loc[   proteinSet["Name"] == proteinTerms[0], targetDescriptors].to_numpy()[0]
        #print(proteinTerms[0], proteinDescriptors)
        proteinDescriptorVals.append(proteinDescriptors)
        massWeightedDescriptors += proteinDescriptors*proteinMass
        totalSerumMass +=  proteinMass
    #print(proteinSetNames)
    allDescriptorVals = np.stack( proteinDescriptorVals)
    #print(allDescriptorVals)
    proteinMassArr = np.array(proteinMassList)
    massDotConc = np.dot(proteinMassArr, serumProteinConcs)
    descriptorsDotConc = np.dot( np.transpose(allDescriptorVals), serumProteinConcs)
    unitVector = np.ones_like(serumProteinConcs)
    totalConc = np.sum(serumProteinConcs)
    massDotUnity = np.dot(proteinMassArr, unitVector)
    descriptorsDotUnity = np.dot( np.transpose(allDescriptorVals), unitVector)
    #
    for line in coronaStatsFile:
        lineTerms = line.strip().split()
        #print(lineTerms[0])
        proteinNums = np.array( [float(a) for a in lineTerms[1:-2]] )
        #print(proteinNums)
        descriptorNums =  np.dot( np.transpose(allDescriptorVals), proteinNums)
        if areaNorm == True:
            descriptorNums = descriptorNums/areaFactor
        if doExpAverage == True:
            dt = float(lineTerms[0]) - lastTime
            lastTime = float(lineTerms[0])
            averageDescriptorVals = averageDescriptorVals * np.exp( -dt/averageExpDecay) + descriptorNums
            expNormDenom = expNormDenom * np.exp(-dt/averageExpDecay) + 1
            #print(str(lastTime) +"," +  ",".join([str(a)  for a in descriptorNums[:2]     ]) +  " average: " +  ",".join([str(a/expNormDenom)  for a in averageDescriptorVals[:2]     ]) )
        else:
            averageDescriptorVals = descriptorNums
            expNormDenom = 1
        #print( str(lineTerms[0]) +"," + )
        totalAdsorbedMass = np.dot( proteinNums, proteinMassArr)
        totalAdsorbedNumber = np.sum(proteinNums)
        massEnrichmentVals = (descriptorNums * massDotConc)/(0.001+totalAdsorbedMass * descriptorsDotConc)
        enrichmentVals = (descriptorNums * totalConc )/(0.001+totalAdsorbedNumber * descriptorsDotConc)
        rawString = ",".join([ str(a) for a in descriptorNums]) 
        if saveAllSteps==True:
            coronaStatOutputFile.write( lineTerms[0] +"," +  rawString+ "\n")
        #enrichString = ",".join([ str(a) for a in enrichmentVals]) 
        #massEnrichString = ",".join([ str(a) for a in massEnrichmentVals]) 
        lastLine=targetMaterial +"," + rawString 
        #print( str(lineTerms[0]) +"," + rawString + "," + enrichString + "," + massEnrichString )
    finalString =  ",".join([ str(a) for a in averageDescriptorVals/expNormDenom])
    lastLine = targetMaterial +"," + finalString
    print(lastLine)
    fingerprintOut.write(lastLine+"\n")
    if saveAllSteps==True:
        coronaStatOutputFile.close() 


fingerprintOut.close()
    
