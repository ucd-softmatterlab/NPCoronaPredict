import os
import argparse




materialSet = {
"silicaquartz": ["surface/SiO2-Quartz","hamaker/SiO2_Quartz.dat",1],
"silicaamorph" :[ "surface/SiO2-Amorphous","hamaker/SiO2_Amorph.dat",1],
"anatase100":["surface/TiO2-ana-100", "hamaker/TiO2_Anatase.dat",1],
"anatase101":["surface/TiO2-ana-101", "hamaker/TiO2_Anatase.dat",1],
"rutile110":["surface/TiO2-rut-110", "hamaker/TiO2_Rutile.dat",1],
"rutile100":["surface/TiO2-rut-100", "hamaker/TiO2_Rutile.dat",1],
"fe2o3":["surface/Fe2O3-001O", "hamaker/Fe2O3.dat",1],
"CdSe":["surface/CdSe/Wurtzite/2-10/sca","hamaker/CdSe.dat",1],
"gold":["surface/Au/FCC/100/sca","hamaker/Metal.dat",1],
"carbonblack":[ "surface/C_amorph-1","hamaker/CarbonAmorph.dat",1],
"cnt":[ "surface/CNT15", "hamaker/CNTFilm.dat",4],
"cntOH4":[ "surface/CNT15-OH-4", "hamaker/CNTFilm.dat",4],
"cntOH14":[ "surface/CNT15-OH-14", "hamaker/CNTFilm.dat",4],
"cntCOOH3" :[ "surface/CNT15-COOH-3", "hamaker/CNTFilm.dat",4],
"cntCOOH30" :[ "surface/CNT15-COOH-30", "hamaker/CNTFilm.dat",4],
"cntCOO--3" :[ "surface/CNT15-COO--3", "hamaker/CNTFilm.dat",4],
"cntCOO--10" :["surface/CNT15-COO--10", "hamaker/CNTFilm.dat",4],
"cntNH2-2":[ "surface/CNT15-NH2-2", "hamaker/CNTFilm.dat",4],
"cntNH2-14":[ "surface/CNT15-NH2-14", "hamaker/CNTFilm.dat",4],
"cntNH3+-2":[ "surface/CNT15-NH3+-2", "hamaker/CNTFilm.dat",4],
"cntNH3+-4":[ "surface/CNT15-NH3+-4", "hamaker/CNTFilm.dat",4],
"grapheneoxide":[ "surface/grapheneoxide", "hamaker/Graphene.dat",1],
"redgrapheneoxide":[ "surface/redgrapheneoxide", "hamaker/Graphene.dat",1],
"graphene":[ "surface/graphene", "hamaker/Graphene.dat",1],
"bi-graphene":[ "surface/bi-graphene", "hamaker/Graphene.dat",1],
"tri-graphene":[ "surface/tri-graphene", "hamaker/Graphene.dat",1]
}


parser = argparse.ArgumentParser(description="Parameters for UA Config File Generation")
parser.add_argument('--operation-type', required = True, choices = ['pdb' , 'pdb-folder'], type = str, help = 'Currently only \'pdb\' or pdb-folder are valid')
parser.add_argument("-p","--input-file",  required=True, help="Path to protein PDB file")
parser.add_argument("-r","--radius", type=float,required=True,help="NP radius [nm]")
parser.add_argument("-z","--zeta", type=float, required=True,  help="NP zeta potential [V]")
parser.add_argument("-o","--outputfolder", default="UAOutput", help="Working folder for results")
parser.add_argument("-m","--material", required=True, choices =  materialSet.keys() ,help="Chosen material")
parser.add_argument("-P", "--postprocess",default = 1, help="Post-process results")
args = parser.parse_args()




canRun = 0
if args.material in materialSet:
    pmfFolder,hamakerFile,shape = materialSet[ args.material]
    canRun = 1
else:
    print("An error has occured, cancelling run. Please check material name again.")
    quit()

outputConfigFile = open("uaconfigautogen.config","w")
outputConfigFile.write("#Autogenerated UA Config file\n")
outputConfigFile.write("output-directory = "+args.outputfolder+"\n")
outputConfigFile.write("pdb-target = "+args.input_file+"\n")
outputConfigFile.write("nanoparticle-radius = [" + str(args.radius)+"]\n")
outputConfigFile.write("np-type = " + str(shape)+"\n")
outputConfigFile.write("pmf-directory = " + pmfFolder + "\n")
outputConfigFile.write("hamaker-file = " + hamakerFile + "\n")
outputConfigFile.write("enable-surface \nenable-core \nenable-electrostatic \nsimulation-steps = 2000 \npotential-cutoff=5.0 \npotential-size = 1000 \nangle-delta = 5.0 \nbjerum-length=0.751 \ndebye-length=0.766 \n")
outputConfigFile.write("zeta-potential = [" + str(args.zeta) + "] \n")
outputConfigFile.write("amino-acids         = [ ALA, ARG, ASN, ASP, CYS, GLN, GLU, GLY, HIS, ILE, LEU, LYS, MET, PHE, PRO, SER, THR, TRP, TYR, VAL] \n")
outputConfigFile.write("amino-acid-charges  = [ 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] \n")
outputConfigFile.write("amino-acid-radii    = [ 0.323, 0.429, 0.362, 0.356, 0.352, 0.386, 0.376, 0.285, 0.302, 0.401, 0.401, 0.405, 0.402, 0.421, 0.362, 0.328, 0.357, 0.449, 0.425, 0.377] \n")
outputConfigFile.close()



print("Generated config file, running UA")
os.system("./UnitedAtom --config-file=uaconfigautogen.config")
print("UA run complete")

if args.postprocess == 1 and args.operation_type=="pdb":
    proteinTargetName = (args.input_file.split("/")[-1])[:-4]
    if shape==1:
        uaResultFileNameOriginal = proteinTargetName+"_"+str(int(args.radius))+"_"+str(int(1000*args.zeta))+".uam"
    else:
        uaResultFileNameOriginal = proteinTargetName+"_"+str(int(args.radius))+"_"+str(int(1000*args.zeta))+"_0.uam"
    uaResultFileName = proteinTargetName+"_"+args.material+"_"+str(args.radius)+"_"+str(args.zeta)+".uam"
    os.system("mv "+args.outputfolder+"/"+uaResultFileNameOriginal+" "+ args.outputfolder+"/"+uaResultFileName)
    print("Generating heatmap")
    os.system("python3 tools/plotmap "+ args.outputfolder+"/"+uaResultFileName)
    print("Generating rotated PDB")
    os.system("python3 tools/ApplyOptimumRotation.py -p " + args.input_file + " -u " + args.outputfolder+"/"+uaResultFileName + " -o "+args.outputfolder)



