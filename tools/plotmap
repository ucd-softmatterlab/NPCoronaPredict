#! /usr/bin/python

from sys import argv
import matplotlib.pyplot as plt
import matplotlib.font_manager as mfm
import numpy as np

import scipy as sp
import scipy.ndimage

if len(argv) != 2:
    print('Usage: ./Plot Heatmap <map.csv>')
    exit(0)

filename = argv[1]

remap = 0
if filename[-4:] == '.uam':
    print("Using .uam convention")
elif filename[-4:] == '.map':
    print("Using .map convention, mirroring co-ordinates")
    remap = 1
else: 
    print('{} is not a recognised file'.format(filename))
    exit(0)

rawData         = np.genfromtxt(argv[1])[:,0:4]
if remap == 1:
    rawData[:,1] = (180.0 - rawData[:,1]) - 5.0
    rawData[:,0] = (np.where( rawData[:,0] > 180.0, rawData[:,0] - 180.0, rawData[:,0] + 180.0)) - 5.0

phiData         = rawData[:,0]
thetaData       = rawData[:,1]
energy          = rawData[:,2]
print(rawData)


sinTheta        = np.sin((2.5+thetaData) * np.pi / 180.0)

boltzmanAverage = np.sum(energy * sinTheta * np.exp(-1.0 *  energy)) / np.sum(sinTheta * np.exp(-1.0 * energy))
simpleAverage   = np.sum(sinTheta * energy)/np.sum(sinTheta) # corrected so that it works properly for isotropic proteins and single AAs with E(phi,theta) = E, else we get Esimple =  2E/Pi 
index           = np.argmin(energy)

print("Simple Average   = {:.3f}".format(simpleAverage))
print("Boltzman Average = {:.3f}".format(boltzmanAverage))
print("Minimum Value    = {:.3f} @ ({}, {})".format(energy[index], phiData[index], thetaData[index]))

delta           = 5 #phiData[1] - phiData[0]
rows            = int(180. / delta)
cols            = int(360. / delta)
image           = np.zeros((rows, cols))

for phi, theta, energy, sd in rawData:
    row             = int(theta / delta)
    col             = int(phi / delta)
    image[row][col] = energy


# Smooth the data
lon = np.linspace(0, 360, cols)
lat = np.linspace(0, 180, rows)
Lon, Lat = np.meshgrid(lon,lat)
image = sp.ndimage.filters.gaussian_filter(image, sigma = [1.0, 1.0], mode = ['constant', 'wrap'])

# Plot the data
font_path = "/usr/share/fonts/truetype/freefont/FreeSerif.ttf"
fontsize  = 16
clabelpad = 20
   
font      = mfm.FontProperties(fname = font_path, size = fontsize)
xlabel    = r"$\phi$" + u"\u00B0"
ylabel    = r"$\theta$" + u"\u00B0"
clabel    = r"k${_B}$T";


fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.pcolormesh(Lon, Lat, image, cmap = plt.cm.jet)
cb = fig.colorbar(im, ax = ax, shrink = 0.5)
cb.set_label(clabel, rotation = 270, labelpad = clabelpad, fontproperties = font)
ax.set_title(argv[1], fontproperties = font)
ax.set_xlabel(xlabel, fontproperties = font)
ax.set_ylabel(ylabel, fontproperties = font)

#plt.tight_layout()

plt.show()

#cax = plt.imshow(image,  interpolation = 'gaussian', aspect = 'auto')
#plt.colorbar(cax)
#plt.xticks(range(0, cols, 10), range(0, 360, 50))
#plt.yticks(range(0, rows, 8), range(0, 180, 40))
#plt.xlabel("Phi (deg)")
#plt.ylabel("Theta (deg)")
#plt.title("Adsorption Free Energy For HSA")
#plt.show()
