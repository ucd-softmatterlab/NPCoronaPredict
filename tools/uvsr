#! /usr/bin/python

from sys import argv
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from scipy.optimize import curve_fit

def GuessFit(R, E0, E1, R0, n):
    #return E0 + E1 * (1.0 - np.exp(np.exp( -0.691 * (R / R0) ** 2))) 
    return E0 + E1 / (R0 + R)**2


plots       = 3
fontsize    = 14

raw         = np.genfromtxt(argv[1])
rows        = raw.shape[0]
blocks      = rows / plots
XY          = np.zeros((blocks, 3 * plots), dtype = float)
data        = raw[:,[1, 3, 4]] 
p           = [None] * plots

for block in range(blocks):
    for block_row in range(plots):        
        XY[block, block_row * plots + 0] = data[block * plots + block_row][0]
        XY[block, block_row * plots + 1] = data[block * plots + block_row][1]
        XY[block, block_row * plots + 2] = data[block * plots + block_row][2]



plt.figure(dpi = 300)

c = ['r', 'g', 'b']

for i in range(plots):
    
    x = XY[:,i*3 + 0][:-1]
    y = XY[:,i*3 + 1][:-1]
    e = XY[:,i*3 + 2][:-1]
    y_limit = XY[:,i*3 + 1][-1]


    (E0, E1, R0, n), cov = curve_fit(GuessFit, x, y, p0 = (y_limit, 6000.0, 5.0, .5))
    print(E0, E1, R0, n)

    fit_x = np.linspace(np.min(x), np.max(x), 1000)
    fit_y = GuessFit(fit_x, E0, E1,  R0, n)

    residuals = y - GuessFit(x, E0, E1, R0, n)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((y - np.mean(y))**2)
    r_squared = 1.0 - (ss_res / ss_tot)
    print("R-Squared: {}".format(r_squared))

    plt.errorbar(x, y, fmt = 'o' + c[i], yerr = 2.0 * e, ecolor = 'k', capthick = 2)
    p[i], = plt.semilogx(fit_x, fit_y, '-' + c[i])
    #plt.semilogx(fit_x, [self._y_inf] * 1000, 'r--')
    #plt.plot(fit_x, fit_y, '-' + self._color)
    #plt.plot(fit_x, [self._y_inf] * 1000, 'r--')



plt.xlabel('R [nm]', fontsize = fontsize)
plt.ylabel('E$_{ad}$ / k$_B$T', fontsize = fontsize)
plt.legend(p, ['-50mV', '0mV', '50mV'], fontsize = fontsize)

plt.tight_layout()
plt.show()


